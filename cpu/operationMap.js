const Operation = require('./operation');
const OperationAlt = require('./operationAlt');

const { NONE, Z, N, H, C } = require('../constants/registerFlags');

const EXT_OPS = 'EXT_OPS';
const EXT_OPS_CB_CODE = 0xcb;
const NULL_OPERATION = 'XX';

function noop() {};

const operationMap = [
    // 0x00 ... 0x0F
    new Operation('NOP', 0x00, 0x00, 0, 4, noop),
    new Operation('LD BC,nn', 0x01, 0x00, 2, 12, function operation (gb, ins) { return gb.register.BC = ins.operand16 }),
    new Operation('LD (BC),A', 0x02, 0x00, 0, 8, function operation (gb, ins) { return gb.memory.writeByte(gb.register.BC, gb.register.A) }),
    new Operation('INC BC', 0x03, 0x00, 0, 8, function operation (gb, ins) { return gb.register.BC = gb.cpu.alu.inc16Bit(gb.register.BC) }),
    new Operation('INC B', 0x04, 0x00, 0, 4, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.inc(gb.register.B, Z | H, NONE, N) }),
    new Operation('DEC B', 0x05, 0x00, 0, 4, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.dec(gb.register.B, Z | H, N) }),
    new Operation('LD B,n', 0x06, 0x00, 1, 8, function operation (gb, ins) { return gb.register.B = ins.operandU8 }),
    new Operation('RLC A', 0x07, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.rlc(gb.register.A, C, NONE, Z | N | H) }),
    new Operation('LD (nn),SP', 0x08, 0x00, 2, 20, function operation (gb, ins) { return gb.memory.write16Bit(ins.operand16, gb.register.SP) }),
    new Operation('ADD HL,BC', 0x09, 0x00, 0, 8, function operation (gb, ins) { return gb.register.HL = gb.cpu.alu.add16Bit(gb.register.HL, gb.register.BC, H | C, NONE, N) }),
    new Operation('LD A,(BC)', 0x0a, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.memory.readByte(gb.register.BC) }),
    new Operation('DEC BC', 0x0b, 0x00, 0, 8, function operation (gb, ins) { return gb.register.BC = gb.cpu.alu.dec16Bit(gb.register.BC) }),
    new Operation('INC C', 0x0c, 0x00, 0, 4, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.inc(gb.register.C, Z | H, NONE, N) }),
    new Operation('DEC C', 0x0d, 0x00, 0, 4, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.dec(gb.register.C, Z | H, N) }),
    new Operation('LD C,n', 0x0e, 0x00, 1, 8, function operation (gb, ins) { return gb.register.C = ins.operandU8 }),
    new Operation('RRC A', 0x0f, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.rrc(gb.register.A, C, NONE, Z | N | H) }),

    // 0x10 ... 0x1F
    new Operation('STOP', 0x10, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.stop() }),
    new Operation('LD DE,nn', 0x11, 0x00, 2, 12, function operation (gb, ins) { return gb.register.DE = ins.operand16 }),
    new Operation('LD (DE),A', 0x12, 0x00, 0, 8, function operation (gb, ins) { return gb.memory.writeByte(gb.register.DE, gb.register.A) }),
    new Operation('INC DE', 0x13, 0x00, 0, 8, function operation (gb, ins) { return gb.register.DE = gb.cpu.alu.inc16Bit(gb.register.DE) }),
    new Operation('INC D', 0x14, 0x00, 0, 4, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.inc(gb.register.D, Z | H, NONE, N) }),
    new Operation('DEC D', 0x15, 0x00, 0, 4, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.dec(gb.register.D, Z | H, N) }),
    new Operation('LD D,n', 0x16, 0x00, 1, 8, function operation (gb, ins) { return gb.register.D = ins.operandU8 }),
    new Operation('RL A', 0x17, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.rl(gb.register.A, C, NONE, Z | N | H) }),
    new Operation('JR n', 0x18, 0x00, 1, 12, function operation (gb, ins) { return gb.register.PC = gb.register.PC + ins.operand8 }),
    new Operation('ADD HL,DE', 0x19, 0x00, 0, 8, function operation (gb, ins) { return gb.register.HL = gb.cpu.alu.add16Bit(gb.register.HL, gb.register.DE, H | C, NONE, N) }),
    new Operation('LD A,(DE)', 0x1a, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.memory.readByte(gb.register.DE) }),
    new Operation('DEC DE', 0x1b, 0x00, 0, 8, function operation (gb, ins) { return gb.register.DE = gb.cpu.alu.dec16Bit(gb.register.DE) }),
    new Operation('INC E', 0x1c, 0x00, 0, 4, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.inc(gb.register.E, Z | H, NONE, N) }),
    new Operation('DEC E', 0x1d, 0x00, 0, 4, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.dec(gb.register.E, Z | H, N) }),
    new Operation('LD E,n', 0x1e, 0x00, 1, 8, function operation (gb, ins) { return gb.register.E = ins.operandU8 }),
    new Operation('RR A', 0x1f, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.rr(gb.register.A, C, NONE, Z | N | H) }),

    // 0x20 ... 0x2F
    new OperationAlt('JR NZ,n', 0x20, 0x00, 1, 12, 8, function operation (gb, ins) {
        return gb.cpu.jumpFlag(ins.operation, gb.register.PC + ins.operand8, !gb.register.getFlags(Z))
    }),
    new Operation('LD HL,nn', 0x21, 0x00, 2, 12, function operation (gb, ins) { return gb.register.HL = ins.operand16 }),
    new Operation('LDI (HL),A', 0x22, 0x00, 0, 8, function operation (gb, ins) {
        gb.memory.writeByte(gb.register.HL, gb.register.A);
        gb.register.HL = gb.cpu.alu.inc16Bit(gb.register.HL);
    }),
    new Operation('INC HL', 0x23, 0x00, 0, 8, function operation (gb, ins) { return gb.register.HL = gb.cpu.alu.inc16Bit(gb.register.HL) }),
    new Operation('INC H', 0x24, 0x00, 0, 4, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.inc(gb.register.H, Z | H, NONE, N) }),
    new Operation('DEC H', 0x25, 0x00, 0, 4, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.dec(gb.register.H, Z | H, N) }),
    new Operation('LD H,n', 0x26, 0x00, 1, 8, function operation (gb, ins) { return gb.register.H = ins.operandU8 }),
    new Operation('DAA', 0x27, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.alu.daa() }),
    new OperationAlt('JR Z,n', 0x28, 0x00, 1, 12, 8, function operation (gb, ins) { return gb.cpu.jumpFlag(ins.operation, gb.register.PC + ins.operand8, gb.register.getFlags(Z)) }),
    new Operation('ADD HL,HL', 0x29, 0x00, 0, 8, function operation (gb, ins) { return gb.register.HL = gb.cpu.alu.add16Bit(gb.register.HL, gb.register.HL, H | C, NONE, N) }),
    new Operation('LDI A,(HL)', 0x2a, 0x00, 0, 8, function operation (gb, ins) {
        gb.register.A = gb.memory.readByte(gb.register.HL);
        gb.register.HL = gb.cpu.alu.inc16Bit(gb.register.HL);
    }),
    new Operation('DEC HL', 0x2b, 0x00, 0, 8, function operation (gb, ins) { return gb.register.HL = gb.cpu.alu.dec16Bit(gb.register.HL) }),
    new Operation('INC L', 0x2c, 0x00, 0, 4, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.inc(gb.register.L, Z | H, NONE, N) }),
    new Operation('DEC L', 0x2d, 0x00, 0, 4, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.dec(gb.register.L, Z | H, N) }),
    new Operation('LD L,n', 0x2e, 0x00, 1, 8, function operation (gb, ins) { return gb.register.L = ins.operandU8 }),
    new Operation('CPL', 0x2f, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.cpl(gb.register.A) }),

    // 0x30 ... 0x3F
    new OperationAlt('JR NC,n', 0x30, 0x00, 1, 12, 8, function operation (gb, ins) { return gb.cpu.jumpFlag(ins.operation, gb.register.PC + ins.operand8, !gb.register.getFlags(C)) }),
    new Operation('LD SP,nn', 0x31, 0x00, 2, 12, function operation (gb, ins) { return gb.register.SP = ins.operand16 }),
    new Operation('LDD (HL),A', 0x32, 0x00, 0, 8, function operation (gb, ins) {
        gb.memory.writeByte(gb.register.HL, gb.register.A);
        gb.register.HL = gb.cpu.alu.dec16Bit(gb.register.HL);
    }),
    new Operation('INC SP', 0x33, 0x00, 0, 8, function operation (gb, ins) { return gb.register.SP = gb.cpu.alu.inc16Bit(gb.register.SP) }),
    new Operation('INC (HL)', 0x34, 0x00, 0, 12, function operation (gb, ins) {
        gb.memory.writeByte(gb.register.HL, gb.cpu.alu.inc(gb.memory.readByte(gb.register.HL), Z | H, NONE, N));
    }),
    new Operation('DEC (HL)', 0x35, 0x00, 0, 12, function operation (gb, ins) {
        gb.memory.writeByte(gb.register.HL, gb.cpu.alu.dec(gb.memory.readByte(gb.register.HL), Z | H, N));
    }),
    new Operation('LD (HL),n', 0x36, 0x00, 1, 8, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, ins.operandU8) }),
    new Operation('SCF', 0x37, 0x00, 0, 4, function operation (gb, ins) {
        gb.register.setFlags(C);
        gb.register.clearFlags(N | H);
    }),
    new OperationAlt('JR C,n', 0x38, 0x00, 1, 12, 8, function operation (gb, ins) { return gb.cpu.jumpFlag(ins.operation, gb.register.PC + ins.operand8, gb.register.getFlags(C)) }),
    new Operation('ADD HL,SP', 0x39, 0x00, 0, 8, function operation (gb, ins) { return gb.register.HL = gb.cpu.alu.add16Bit(gb.register.HL, gb.register.SP, H | C, NONE, N) }),
    new Operation('LDD A,(HL)', 0x3a, 0x00, 0, 8, function operation (gb, ins) {
        gb.register.A = gb.memory.readByte(gb.register.HL);
        gb.register.HL = gb.cpu.alu.dec16Bit(gb.register.HL);
    }),
    new Operation('DEC SP', 0x3b, 0x00, 0, 8, function operation (gb, ins) { return gb.register.SP = gb.cpu.alu.dec16Bit(gb.register.SP) }),
    new Operation('INC A', 0x3c, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.inc(gb.register.A, Z | H, NONE, N) }),
    new Operation('DEC A', 0x3d, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.dec(gb.register.A, Z | H, N) }),
    new Operation('LD A,n', 0x3e, 0x00, 1, 8, function operation (gb, ins) { return gb.register.A = ins.operandU8 }),
    new Operation('CCF', 0x3f, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.alu.ccf() }),

    // 0x40 .. 0x4F
    new Operation('LD B,B', 0x40, 0x00, 0, 4, noop),
    new Operation('LD B,C', 0x41, 0x00, 0, 4, function operation (gb, ins) { return gb.register.B = gb.register.C }),
    new Operation('LD B,D', 0x42, 0x00, 0, 4, function operation (gb, ins) { return gb.register.B = gb.register.D }),
    new Operation('LD B,E', 0x43, 0x00, 0, 4, function operation (gb, ins) { return gb.register.B = gb.register.E }),
    new Operation('LD B,H', 0x44, 0x00, 0, 4, function operation (gb, ins) { return gb.register.B = gb.register.H }),
    new Operation('LD B,L', 0x45, 0x00, 0, 4, function operation (gb, ins) { return gb.register.B = gb.register.L }),
    new Operation('LD B,(HL)', 0x46, 0x00, 0, 8, function operation (gb, ins) { return gb.register.B = gb.memory.readByte(gb.register.HL) }),
    new Operation('LD B,A', 0x47, 0x00, 0, 4, function operation (gb, ins) { return gb.register.B = gb.register.A }),
    new Operation('LD C,B', 0x48, 0x00, 0, 4, function operation (gb, ins) { return gb.register.C = gb.register.B }),
    new Operation('LD C,C', 0x49, 0x00, 0, 4, noop),
    new Operation('LD C,D', 0x4a, 0x00, 0, 4, function operation (gb, ins) { return gb.register.C = gb.register.D }),
    new Operation('LD C,E', 0x4b, 0x00, 0, 4, function operation (gb, ins) { return gb.register.C = gb.register.E }),
    new Operation('LD C,H', 0x4c, 0x00, 0, 4, function operation (gb, ins) { return gb.register.C = gb.register.H }),
    new Operation('LD C,L', 0x4d, 0x00, 0, 4, function operation (gb, ins) { return gb.register.C = gb.register.L }),
    new Operation('LD C,(HL)', 0x4e, 0x00, 0, 8, function operation (gb, ins) { return gb.register.C = gb.memory.readByte(gb.register.HL) }),
    new Operation('LD C,A', 0x4f, 0x00, 0, 4, function operation (gb, ins) { return gb.register.C = gb.register.A }),

    // 0x50 .. 0x5F
    new Operation('LD D,B', 0x50, 0x00, 0, 4, function operation (gb, ins) { return gb.register.D = gb.register.B }),
    new Operation('LD D,C', 0x51, 0x00, 0, 4, function operation (gb, ins) { return gb.register.D = gb.register.C }),
    new Operation('LD D,D', 0x52, 0x00, 0, 4, noop),
    new Operation('LD D,E', 0x53, 0x00, 0, 4, function operation (gb, ins) { return gb.register.D = gb.register.E }),
    new Operation('LD D,H', 0x54, 0x00, 0, 4, function operation (gb, ins) { return gb.register.D = gb.register.H }),
    new Operation('LD D,L', 0x55, 0x00, 0, 4, function operation (gb, ins) { return gb.register.D = gb.register.L }),
    new Operation('LD D,(HL)', 0x56, 0x00, 0, 8, function operation (gb, ins) { return gb.register.D = gb.memory.readByte(gb.register.HL) }),
    new Operation('LD D,A', 0x57, 0x00, 0, 4, function operation (gb, ins) { return gb.register.D = gb.register.A }),
    new Operation('LD E,B', 0x58, 0x00, 0, 4, function operation (gb, ins) { return gb.register.E = gb.register.B }),
    new Operation('LD E,C', 0x59, 0x00, 0, 4, function operation (gb, ins) { return gb.register.E = gb.register.C }),
    new Operation('LD E,D', 0x5a, 0x00, 0, 4, function operation (gb, ins) { return gb.register.E = gb.register.D }),
    new Operation('LD E,E', 0x5b, 0x00, 0, 4, noop),
    new Operation('LD E,H', 0x5c, 0x00, 0, 4, function operation (gb, ins) { return gb.register.E = gb.register.H }),
    new Operation('LD E,L', 0x5d, 0x00, 0, 4, function operation (gb, ins) { return gb.register.E = gb.register.L }),
    new Operation('LD E,(HL)', 0x5e, 0x00, 0, 8, function operation (gb, ins) { return gb.register.E = gb.memory.readByte(gb.register.HL) }),
    new Operation('LD E,A', 0x5f, 0x00, 0, 4, function operation (gb, ins) { return gb.register.E = gb.register.A }),

    // 0x60 .. 0x6F
    new Operation('LD H,B', 0x60, 0x00, 0, 4, function operation (gb, ins) { return gb.register.H = gb.register.B }),
    new Operation('LD H,C', 0x61, 0x00, 0, 4, function operation (gb, ins) { return gb.register.H = gb.register.C }),
    new Operation('LD H,D', 0x62, 0x00, 0, 4, function operation (gb, ins) { return gb.register.H = gb.register.D }),
    new Operation('LD H,E', 0x63, 0x00, 0, 4, function operation (gb, ins) { return gb.register.H = gb.register.E }),
    new Operation('LD H,H', 0x64, 0x00, 0, 4, noop),
    new Operation('LD H,L', 0x65, 0x00, 0, 4, function operation (gb, ins) { return gb.register.H = gb.register.L }),
    new Operation('LD H,(HL)', 0x66, 0x00, 0, 8, function operation (gb, ins) { return gb.register.H = gb.memory.readByte(gb.register.HL) }),
    new Operation('LD H,A', 0x67, 0x00, 0, 4, function operation (gb, ins) { return gb.register.H = gb.register.A }),
    new Operation('LD L,B', 0x68, 0x00, 0, 4, function operation (gb, ins) { return gb.register.L = gb.register.B }),
    new Operation('LD L,C', 0x69, 0x00, 0, 4, function operation (gb, ins) { return gb.register.L = gb.register.C }),
    new Operation('LD L,D', 0x6a, 0x00, 0, 4, function operation (gb, ins) { return gb.register.L = gb.register.D }),
    new Operation('LD L,E', 0x6b, 0x00, 0, 4, function operation (gb, ins) { return gb.register.L = gb.register.E }),
    new Operation('LD L,H', 0x6c, 0x00, 0, 4, function operation (gb, ins) { return gb.register.L = gb.register.H }),
    new Operation('LD L,L', 0x6d, 0x00, 0, 4, noop),
    new Operation('LD L,(HL)', 0x6e, 0x00, 0, 8, function operation (gb, ins) { return gb.register.L = gb.memory.readByte(gb.register.HL) }),
    new Operation('LD L,A', 0x6f, 0x00, 0, 4, function operation (gb, ins) { return gb.register.L = gb.register.A }),

    // 0x70 .. 0x7F
    new Operation('LD (HL),B', 0x70, 0x00, 0, 4, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.register.B) }),
    new Operation('LD (HL),C', 0x71, 0x00, 0, 4, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.register.C) }),
    new Operation('LD (HL),D', 0x72, 0x00, 0, 4, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.register.D) }),
    new Operation('LD (HL),E', 0x73, 0x00, 0, 4, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.register.E) }),
    new Operation('LD (HL),H', 0x74, 0x00, 0, 4, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.register.H) }),
    new Operation('LD (HL),L', 0x75, 0x00, 0, 4, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.register.L) }),
    new Operation('HALT', 0x76, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.halt() }),
    new Operation('LD (HL),A', 0x77, 0x00, 0, 4, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.register.A) }),
    new Operation('LD A,B', 0x78, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.register.B }),
    new Operation('LD A,C', 0x79, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.register.C }),
    new Operation('LD A,D', 0x7a, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.register.D }),
    new Operation('LD A,E', 0x7b, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.register.E }),
    new Operation('LD A,H', 0x7c, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.register.H }),
    new Operation('LD A,L', 0x7d, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.register.L }),
    new Operation('LD A,(HL)', 0x7e, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.memory.readByte(gb.register.HL) }),
    new Operation('LD A,A', 0x7f, 0x00, 0, 4, noop),

    // 0x80 .. 0x8F
    new Operation('ADD A,B', 0x80, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.add(gb.register.A, gb.register.B, Z | H | C, NONE, N) }),
    new Operation('ADD A,C', 0x81, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.add(gb.register.A, gb.register.C, Z | H | C, NONE, N) }),
    new Operation('ADD A,D', 0x82, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.add(gb.register.A, gb.register.D, Z | H | C, NONE, N) }),
    new Operation('ADD A,E', 0x83, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.add(gb.register.A, gb.register.E, Z | H | C, NONE, N) }),
    new Operation('ADD A,H', 0x84, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.add(gb.register.A, gb.register.H, Z | H | C, NONE, N) }),
    new Operation('ADD A,L', 0x85, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.add(gb.register.A, gb.register.L, Z | H | C, NONE, N) }),
    new Operation('ADD A,(HL)', 0x86, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.add(gb.register.A, gb.memory.readByte(gb.register.HL), Z | H | C, NONE, N) }),
    new Operation('ADD A,A', 0x87, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.add(gb.register.A, gb.register.A, Z | H | C, NONE, N) }),
    new Operation('ADC A,B', 0x88, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.adc(gb.register.A, gb.register.B, Z | H | C, NONE, N) }),
    new Operation('ADC A,C', 0x89, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.adc(gb.register.A, gb.register.C, Z | H | C, NONE, N) }),
    new Operation('ADC A,D', 0x8a, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.adc(gb.register.A, gb.register.D, Z | H | C, NONE, N) }),
    new Operation('ADC A,E', 0x8b, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.adc(gb.register.A, gb.register.E, Z | H | C, NONE, N) }),
    new Operation('ADC A,H', 0x8c, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.adc(gb.register.A, gb.register.H, Z | H | C, NONE, N) }),
    new Operation('ADC A,L', 0x8d, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.adc(gb.register.A, gb.register.L, Z | H | C, NONE, N) }),
    new Operation('ADC A,(HL)', 0x8e, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.adc(gb.register.A, gb.memory.readByte(gb.register.HL), Z | H | C, NONE, N) }),
    new Operation('ADC A,A', 0x8f, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.adc(gb.register.A, gb.register.A, Z | H | C, NONE, N) }),

    // 0x90 .. 0x9F
    new Operation('SUB A,B', 0x90, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sub(gb.register.A, gb.register.B, Z | H | C, N) }),
    new Operation('SUB A,C', 0x91, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sub(gb.register.A, gb.register.C, Z | H | C, N) }),
    new Operation('SUB A,D', 0x92, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sub(gb.register.A, gb.register.D, Z | H | C, N) }),
    new Operation('SUB A,E', 0x93, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sub(gb.register.A, gb.register.E, Z | H | C, N) }),
    new Operation('SUB A,H', 0x94, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sub(gb.register.A, gb.register.H, Z | H | C, N) }),
    new Operation('SUB A,L', 0x95, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sub(gb.register.A, gb.register.L, Z | H | C, N) }),
    new Operation('SUB A,(HL)', 0x96, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sub(gb.register.A, gb.memory.readByte(gb.register.HL), Z | H | C, N) }),
    new Operation('SUB A,A', 0x97, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sub(gb.register.A, gb.register.A, Z | H | C, N) }),
    new Operation('SBC A,B', 0x98, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sbc(gb.register.A, gb.register.B, Z | H | C, N) }),
    new Operation('SBC A,C', 0x99, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sbc(gb.register.A, gb.register.C, Z | H | C, N) }),
    new Operation('SBC A,D', 0x9a, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sbc(gb.register.A, gb.register.D, Z | H | C, N) }),
    new Operation('SBC A,E', 0x9b, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sbc(gb.register.A, gb.register.E, Z | H | C, N) }),
    new Operation('SBC A,H', 0x9c, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sbc(gb.register.A, gb.register.H, Z | H | C, N) }),
    new Operation('SBC A,L', 0x9d, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sbc(gb.register.A, gb.register.L, Z | H | C, N) }),
    new Operation('SBC A,(HL)', 0x9e, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sbc(gb.register.A, gb.memory.readByte(gb.register.HL), Z | H | C, N) }),
    new Operation('SBC A,A', 0x9f, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sbc(gb.register.A, gb.register.A, Z | H | C, N) }),

    // 0xA0 .. 0xAF
    new Operation('AND B', 0xa0, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.and(gb.register.B) }),
    new Operation('AND C', 0xa1, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.and(gb.register.C) }),
    new Operation('AND D', 0xa2, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.and(gb.register.D) }),
    new Operation('AND E', 0xa3, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.and(gb.register.E) }),
    new Operation('AND H', 0xa4, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.and(gb.register.H) }),
    new Operation('AND L', 0xa5, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.and(gb.register.L) }),
    new Operation('AND (HL)', 0xa6, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.and(gb.memory.readByte(gb.register.HL)) }),
    new Operation('AND A', 0xa7, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.and(gb.register.A) }),
    new Operation('XOR B', 0xa8, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.xor(gb.register.B) }),
    new Operation('XOR C', 0xa9, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.xor(gb.register.C) }),
    new Operation('XOR D', 0xaa, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.xor(gb.register.D) }),
    new Operation('XOR E', 0xab, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.xor(gb.register.E) }),
    new Operation('XOR H', 0xac, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.xor(gb.register.H) }),
    new Operation('XOR L', 0xad, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.xor(gb.register.L) }),
    new Operation('XOR (HL)', 0xae, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.xor(gb.memory.readByte(gb.register.HL)) }),
    new Operation('XOR A', 0xaf, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.xor(gb.register.A) }),

    // 0xB0 .. 0xBF
    new Operation('OR B', 0xb0, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.or(gb.register.B) }),
    new Operation('OR C', 0xb1, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.or(gb.register.C) }),
    new Operation('OR D', 0xb2, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.or(gb.register.D) }),
    new Operation('OR E', 0xb3, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.or(gb.register.E) }),
    new Operation('OR H', 0xb4, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.or(gb.register.H) }),
    new Operation('OR L', 0xb5, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.or(gb.register.L) }),
    new Operation('OR (HL)', 0xb6, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.or(gb.memory.readByte(gb.register.HL)) }),
    new Operation('OR A', 0xb7, 0x00, 0, 4, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.or(gb.register.A) }),
    new Operation('CP B', 0xb8, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.alu.cp(gb.register.B) }),
    new Operation('CP C', 0xb9, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.alu.cp(gb.register.C) }),
    new Operation('CP D', 0xba, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.alu.cp(gb.register.D) }),
    new Operation('CP E', 0xbb, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.alu.cp(gb.register.E) }),
    new Operation('CP H', 0xbc, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.alu.cp(gb.register.H) }),
    new Operation('CP L', 0xbd, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.alu.cp(gb.register.L) }),
    new Operation('CP (HL)', 0xbe, 0x00, 0, 8, function operation (gb, ins) { return gb.cpu.alu.cp(gb.memory.readByte(gb.register.HL)) }),
    new Operation('CP A', 0xbf, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.alu.cp(gb.register.A) }),

    // 0xC0 .. 0xCF
    new OperationAlt('RET NZ', 0xc0, 0x00, 0, 20, 8, function operation (gb, ins) { return gb.cpu.retFlag(ins.operation, !gb.register.getFlags(Z)) }),
    new Operation('POP BC', 0xc1, 0x00, 0, 12, function operation (gb, ins) { return gb.register.BC = gb.cpu.pop() }),
    new OperationAlt('JP NZ,nn', 0xc2, 0x00, 2, 16, 12, function operation (gb, ins) { return gb.cpu.jumpFlag(ins.operation, ins.operand16, !gb.register.getFlags(Z)) }),
    new Operation('JP nn', 0xc3, 0x00, 2, 16, function operation (gb, ins) {
        gb.cpu.jump(ins.operand16);
    }),
    new OperationAlt('CALL NZ,nn', 0xc4, 0x00, 2, 24, 12, function operation (gb, ins) { return gb.cpu.callFlag(ins.operation, ins.operand16, !gb.register.getFlags(Z)) }),
    new Operation('PUSH BC', 0xc5, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.push(gb.register.BC) }),
    new Operation('ADD A,n', 0xc6, 0x00, 1, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.add(gb.register.A, ins.operandU8, Z | H | C, NONE, N) }),
    new Operation('RST 0', 0xc7, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.rst(0) }),
    new OperationAlt('RET Z', 0xc8, 0x00, 0, 20, 8, function operation (gb, ins) { return gb.cpu.retFlag(ins.operation, gb.register.getFlags(Z)) }),
    new Operation('RET', 0xc9, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.ret() }),
    new OperationAlt('JP Z,nn', 0xca, 0x00, 2, 16, 12, function operation (gb, ins) { return gb.cpu.jumpFlag(ins.operation, ins.operand16, gb.register.getFlags(Z)) }),
    new Operation(EXT_OPS, EXT_OPS_CB_CODE, 0x00, 0, 4, noop),
    new OperationAlt('CALL Z,nn', 0xcc, 0x00, 2, 24, 12, function operation (gb, ins) { return gb.cpu.callFlag(ins.operation, ins.operand16, gb.register.getFlags(Z)) }),
    new Operation('CALL nn', 0xcd, 0x00, 2, 24, function operation (gb, ins) { return gb.cpu.call(ins.operand16) }),
    new Operation('ADC A,n', 0xce, 0x00, 1, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.adc(gb.register.A, ins.operandU8, Z | H | C, NONE, N) }),
    new Operation('RST 8', 0xc7, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.rst(8) }),

    // 0xD0 .. 0xDF
    new OperationAlt('RET NC', 0xd0, 0x00, 0, 20, 8, function operation (gb, ins) { return gb.cpu.retFlag(ins.operation, !gb.register.getFlags(C)) }),
    new Operation('POP DE', 0xd1, 0x00, 0, 12, function operation (gb, ins) { return gb.register.DE = gb.cpu.pop() }),
    new OperationAlt('JP NC,nn', 0xd2, 0x00, 2, 16, 12, function operation (gb, ins) { return gb.cpu.jumpFlag(ins.operation, ins.operand16, !gb.register.getFlags(C)) }),
    new Operation(NULL_OPERATION, 0xd3, 0x00, 0, 0, noop),
    new OperationAlt('CALL NC,nn', 0xd4, 0x00, 2, 24, 12, function operation (gb, ins) { return gb.cpu.callFlag(ins.operation, ins.operand16, !gb.register.getFlags(C)) }),
    new Operation('PUSH DE', 0xd5, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.push(gb.register.DE) }),
    new Operation('SUB A,n', 0xd6, 0x00, 1, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sub(gb.register.A, ins.operandU8, Z | H | C, N) }),
    new Operation('RST 10', 0xd7, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.rst(0x10) }),
    new OperationAlt('RET C', 0xd8, 0x00, 0, 20, 8, function operation (gb, ins) { return gb.cpu.retFlag(ins.operation, gb.register.getFlags(C)) }),
    new Operation('RETI', 0xd9, 0x00, 0, 16, function operation (gb, ins) {
        gb.cpu.ret();
        gb.register.IME = true;
    }),
    new OperationAlt('JP C,nn', 0xda, 0x00, 2, 16, 12, function operation (gb, ins) { return gb.cpu.jumpFlag(ins.operation, ins.operand16, gb.register.getFlags(C)) }),
    new Operation(NULL_OPERATION, 0xdb, 0x00, 0, 0, noop),
    new OperationAlt('CALL C,nn', 0xdc, 0x00, 2, 24, 12, function operation (gb, ins) { return gb.cpu.callFlag(ins.operation, ins.operand16, gb.register.getFlags(C)) }),
    new Operation(NULL_OPERATION, 0xdd, 0x00, 0, 0, noop),
    new Operation('SBC A,n', 0xde, 0x00, 1, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sbc(gb.register.A, ins.operandU8, Z | H | C, N) }),
    new Operation('RST 18', 0xd7, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.rst(0x18) }),

    // 0xE0 .. 0xEF
    new Operation('LDH (n),A', 0xe0, 0x00, 1, 12, function operation (gb, ins) {
        gb.memory.writeByte(0xff00 + ins.operandU8, gb.register.A)
    }),
    new Operation('POP HL', 0xe1, 0x00, 0, 12, function operation (gb, ins) { return gb.register.HL = gb.cpu.pop() }),
    new Operation('LDH (C),A', 0xe2, 0x00, 0, 8, function operation (gb, ins) { return gb.memory.writeByte(0xff00 + gb.register.C, gb.register.A) }),
    new Operation(NULL_OPERATION, 0xe3, 0x00, 0, 0, noop),
    new Operation(NULL_OPERATION, 0xe4, 0x00, 0, 0, noop),
    new Operation('PUSH HL', 0xe5, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.push(gb.register.HL) }),
    new Operation('AND n', 0xe6, 0x00, 1, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.and(ins.operandU8) }),
    new Operation('RST 20', 0xe7, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.rst(0x20) }),
    new Operation('ADD SP,d', 0xe8, 0x00, 1, 16, function operation (gb, ins) { return gb.register.SP = gb.cpu.alu.add16And8Bit(gb.register.SP, ins.operand8, H | C, NONE, Z | N) }),
    new Operation('JP (HL)', 0xe9, 0x00, 0, 4, function operation (gb, ins) { return gb.cpu.jump(gb.register.HL) }),
    new Operation('LD (nn),A', 0xea, 0x00, 2, 16, function operation (gb, ins) { return gb.memory.writeByte(ins.operand16, gb.register.A) }),
    new Operation(NULL_OPERATION, 0xeb, 0x00, 0, 0, noop),
    new Operation(NULL_OPERATION, 0xec, 0x00, 0, 0, noop),
    new Operation(NULL_OPERATION, 0xed, 0x00, 0, 0, noop),
    new Operation('XOR n', 0xee, 0x00, 1, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.xor(ins.operandU8) }),
    new Operation('RST 28', 0xe7, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.rst(0x28) }),

    // 0xF0 .. 0xFF
    new Operation('LDH A,(n)', 0xf0, 0x00, 1, 12, function operation (gb, ins) { return gb.register.A = gb.memory.readByte(0xff00 + ins.operandU8) }),
    new Operation('POP AF', 0xf1, 0x00, 0, 12, function operation (gb, ins) { return gb.register.AF = gb.cpu.pop() }),
    new Operation('LDH A, (C)', 0xf2, 0x00, 0, 8, function operation (gb, ins) { return gb.register.A = gb.memory.readByte(0xff00 + gb.register.C) }),
    new Operation('DI', 0xf3, 0x00, 0, 4, function operation (gb, ins) {
        gb.register.IME = false;
        gb.register.IMESet = true;
    }),
    new Operation(NULL_OPERATION, 0xf4, 0x00, 0, 0, noop),
    new Operation('PUSH AF', 0xf5, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.push(gb.register.AF) }),
    new Operation('OR n', 0xf6, 0x00, 1, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.or(ins.operandU8) }),
    new Operation('RST 30', 0xf7, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.rst(0x30) }),
    new Operation('LDHL SP,d', 0xf8, 0x00, 1, 12, function operation (gb, ins) { return gb.register.HL = gb.cpu.alu.add16And8Bit(gb.register.SP, ins.operand8, H | C, NONE, Z | N) }),
    new Operation('LD SP,HL', 0xf9, 0x00, 0, 4, function operation (gb, ins) { return gb.register.SP = gb.register.HL }),
    new Operation('LD A,(nn)', 0xfa, 0x00, 2, 16, function operation (gb, ins) { return gb.register.A = gb.memory.readByte(ins.operand16) }),
    new Operation('EI', 0xfb, 0x00, 0, 0, function operation (gb, ins) {
        gb.register.IME = true;
        gb.register.IMESet = true;
    }),
    new Operation(NULL_OPERATION, 0xfc, 0x00, 0, 0, noop),
    new Operation(NULL_OPERATION, 0xfd, 0x00, 0, 0, noop),
    new Operation('CP n', 0xfe, 0x00, 1, 8, function operation (gb, ins) { return gb.cpu.alu.cp(ins.operandU8) }),
    new Operation('RST 38', 0xf7, 0x00, 0, 16, function operation (gb, ins) { return gb.cpu.rst(0x38) }),
];

const cbOperationMap = [
    // 0x00 .. 0x0F
    new Operation('RLC B', 0xcb, 0x00, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.rlc(gb.register.B, Z | C, NONE, N | H) }),
    new Operation('RLC C', 0xcb, 0x01, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.rlc(gb.register.C, Z | C, NONE, N | H) }),
    new Operation('RLC D', 0xcb, 0x02, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.rlc(gb.register.D, Z | C, NONE, N | H) }),
    new Operation('RLC E', 0xcb, 0x03, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.rlc(gb.register.E, Z | C, NONE, N | H) }),
    new Operation('RLC H', 0xcb, 0x04, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.rlc(gb.register.H, Z | C, NONE, N | H) }),
    new Operation('RLC L', 0xcb, 0x05, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.rlc(gb.register.L, Z | C, NONE, N | H) }),
    new Operation('RLC (HL)', 0xcb, 0x06, 0, 16, function operation (gb, ins) {
        gb.memory.writeByte(gb.register.HL, gb.cpu.alu.rlc(gb.memory.readByte(gb.register.HL), Z | C, NONE, N | H));
    }),
    new Operation('RLC A', 0xcb, 0x07, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.rlc(gb.register.A, Z | C, NONE, N | H) }),
    new Operation('RRC B', 0xcb, 0x08, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.rrc(gb.register.B, Z | C, NONE, N | H) }),
    new Operation('RRC C', 0xcb, 0x09, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.rrc(gb.register.C, Z | C, NONE, N | H) }),
    new Operation('RRC D', 0xcb, 0x0a, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.rrc(gb.register.D, Z | C, NONE, N | H) }),
    new Operation('RRC E', 0xcb, 0x0b, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.rrc(gb.register.E, Z | C, NONE, N | H) }),
    new Operation('RRC H', 0xcb, 0x0c, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.rrc(gb.register.H, Z | C, NONE, N | H) }),
    new Operation('RRC L', 0xcb, 0x0d, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.rrc(gb.register.L, Z | C, NONE, N | H) }),
    new Operation('RRC (HL)', 0xcb, 0x0e, 0, 16, function operation (gb, ins) {
        gb.memory.writeByte(gb.register.HL, gb.cpu.alu.rrc(gb.memory.readByte(gb.register.HL), Z | C, NONE, N | H));
    }),
    new Operation('RRC A', 0xcb, 0x0f, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.rrc(gb.register.A, Z | C, NONE, N | H) }),

    // 0x10 .. 0x1F
    new Operation('RL B', 0xcb, 0x10, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.rl(gb.register.B, Z | C, NONE, N | H) }),
    new Operation('RL C', 0xcb, 0x11, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.rl(gb.register.C, Z | C, NONE, N | H) }),
    new Operation('RL D', 0xcb, 0x12, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.rl(gb.register.D, Z | C, NONE, N | H) }),
    new Operation('RL E', 0xcb, 0x13, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.rl(gb.register.E, Z | C, NONE, N | H) }),
    new Operation('RL H', 0xcb, 0x14, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.rl(gb.register.H, Z | C, NONE, N | H) }),
    new Operation('RL L', 0xcb, 0x15, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.rl(gb.register.L, Z | C, NONE, N | H) }),
    new Operation('RL (HL)', 0xcb, 0x16, 0, 16, function operation (gb, ins) {
        gb.memory.writeByte(gb.register.HL, gb.cpu.alu.rl(gb.memory.readByte(gb.register.HL), Z | C, NONE, N | H));
    }),
    new Operation('RL A', 0xcb, 0x17, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.rl(gb.register.A, Z | C, NONE, N | H) }),
    new Operation('RR B', 0xcb, 0x18, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.rr(gb.register.B, Z | C, NONE, N | H) }),
    new Operation('RR C', 0xcb, 0x19, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.rr(gb.register.C, Z | C, NONE, N | H) }),
    new Operation('RR D', 0xcb, 0x1a, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.rr(gb.register.D, Z | C, NONE, N | H) }),
    new Operation('RR E', 0xcb, 0x1b, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.rr(gb.register.E, Z | C, NONE, N | H) }),
    new Operation('RR H', 0xcb, 0x1c, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.rr(gb.register.H, Z | C, NONE, N | H) }),
    new Operation('RR L', 0xcb, 0x1d, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.rr(gb.register.L, Z | C, NONE, N | H) }),
    new Operation('RR (HL)', 0xcb, 0x1e, 0, 16, function operation (gb, ins) {
        gb.memory.writeByte(gb.register.HL, gb.cpu.alu.rr(gb.memory.readByte(gb.register.HL), Z | C, NONE, N | H));
    }),
    new Operation('RR A', 0xcb, 0x1f, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.rr(gb.register.A, Z | C, NONE, N | H) }),

    // 0x20 .. 0x2F
    new Operation('SLA B', 0xcb, 0x20, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.sla(gb.register.B) }),
    new Operation('SLA C', 0xcb, 0x21, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.sla(gb.register.C) }),
    new Operation('SLA D', 0xcb, 0x22, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.sla(gb.register.D) }),
    new Operation('SLA E', 0xcb, 0x23, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.sla(gb.register.E) }),
    new Operation('SLA H', 0xcb, 0x24, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.sla(gb.register.H) }),
    new Operation('SLA L', 0xcb, 0x25, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.sla(gb.register.L) }),
    new Operation('SLA (HL)', 0xcb, 0x26, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.sla(gb.memory.readByte(gb.register.HL))) }),
    new Operation('SLA A', 0xcb, 0x27, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sla(gb.register.A) }),
    new Operation('SRA B', 0xcb, 0x28, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.sr(gb.register.B, false) }),
    new Operation('SRA C', 0xcb, 0x29, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.sr(gb.register.C, false) }),
    new Operation('SRA D', 0xcb, 0x2a, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.sr(gb.register.D, false) }),
    new Operation('SRA E', 0xcb, 0x2b, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.sr(gb.register.E, false) }),
    new Operation('SRA H', 0xcb, 0x2c, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.sr(gb.register.H, false) }),
    new Operation('SRA L', 0xcb, 0x2d, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.sr(gb.register.L, false) }),
    new Operation('SRA (HL)', 0xcb, 0x2e, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.sr(gb.memory.readByte(gb.register.HL), false)) }),
    new Operation('SRA A', 0xcb, 0x2f, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sr(gb.register.A, false) }),

    // 0x30 .. 0x3F
    new Operation('SWAP B', 0xcb, 0x30, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.swap(gb.register.B) }),
    new Operation('SWAP C', 0xcb, 0x31, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.swap(gb.register.C) }),
    new Operation('SWAP D', 0xcb, 0x32, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.swap(gb.register.D) }),
    new Operation('SWAP E', 0xcb, 0x33, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.swap(gb.register.E) }),
    new Operation('SWAP H', 0xcb, 0x34, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.swap(gb.register.H) }),
    new Operation('SWAP L', 0xcb, 0x35, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.swap(gb.register.L) }),
    new Operation('SWAP (HL)', 0xcb, 0x36, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.swap(gb.memory.readByte(gb.register.HL))) }),
    new Operation('SWAP A', 0xcb, 0x37, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.swap(gb.register.A) }),
    new Operation('SRL B', 0xcb, 0x38, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.sr(gb.register.B, true) }),
    new Operation('SRL C', 0xcb, 0x39, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.sr(gb.register.C, true) }),
    new Operation('SRL D', 0xcb, 0x3a, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.sr(gb.register.D, true) }),
    new Operation('SRL E', 0xcb, 0x3b, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.sr(gb.register.E, true) }),
    new Operation('SRL H', 0xcb, 0x3c, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.sr(gb.register.H, true) }),
    new Operation('SRL L', 0xcb, 0x3d, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.sr(gb.register.L, true) }),
    new Operation('SRL (HL)', 0xcb, 0x3e, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.sr(gb.memory.readByte(gb.register.HL), true)) }),
    new Operation('SRL A', 0xcb, 0x3f, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.sr(gb.register.A, true) }),

    // 0x40 .. 0x4F
    new Operation('BIT 0,B', 0xcb, 0x40, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.B, 0) }),
    new Operation('BIT 0,C', 0xcb, 0x41, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.C, 0) }),
    new Operation('BIT 0,D', 0xcb, 0x42, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.D, 0) }),
    new Operation('BIT 0,E', 0xcb, 0x43, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.E, 0) }),
    new Operation('BIT 0,H', 0xcb, 0x44, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.H, 0) }),
    new Operation('BIT 0,L', 0xcb, 0x45, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.L, 0) }),
    new Operation('BIT 0,(HL)', 0xcb, 0x46, 0, 16, function operation (gb, ins) { return gb.cpu.alu.bit(gb.memory.readByte(gb.register.HL), 0) }),
    new Operation('BIT 0,A', 0xcb, 0x47, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.A, 0) }),
    new Operation('BIT 1,B', 0xcb, 0x48, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.B, 1) }),
    new Operation('BIT 1,C', 0xcb, 0x49, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.C, 1) }),
    new Operation('BIT 1,D', 0xcb, 0x4a, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.D, 1) }),
    new Operation('BIT 1,E', 0xcb, 0x4b, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.E, 1) }),
    new Operation('BIT 1,H', 0xcb, 0x4c, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.H, 1) }),
    new Operation('BIT 1,L', 0xcb, 0x4d, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.L, 1) }),
    new Operation('BIT 1,(HL)', 0xcb, 0x4e, 0, 16, function operation (gb, ins) { return gb.cpu.alu.bit(gb.memory.readByte(gb.register.HL), 1) }),
    new Operation('BIT 1,A', 0xcb, 0x4f, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.A, 1) }),

    // 0x50 .. 0x5F
    new Operation('BIT 2,B', 0xcb, 0x50, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.B, 2) }),
    new Operation('BIT 2,C', 0xcb, 0x51, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.C, 2) }),
    new Operation('BIT 2,D', 0xcb, 0x52, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.D, 2) }),
    new Operation('BIT 2,E', 0xcb, 0x53, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.E, 2) }),
    new Operation('BIT 2,H', 0xcb, 0x54, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.H, 2) }),
    new Operation('BIT 2,L', 0xcb, 0x55, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.L, 2) }),
    new Operation('BIT 2,(HL)', 0xcb, 0x56, 0, 16, function operation (gb, ins) { return gb.cpu.alu.bit(gb.memory.readByte(gb.register.HL), 2) }),
    new Operation('BIT 2,A', 0xcb, 0x57, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.A, 2) }),
    new Operation('BIT 3,B', 0xcb, 0x58, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.B, 3) }),
    new Operation('BIT 3,C', 0xcb, 0x59, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.C, 3) }),
    new Operation('BIT 3,D', 0xcb, 0x5a, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.D, 3) }),
    new Operation('BIT 3,E', 0xcb, 0x5b, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.E, 3) }),
    new Operation('BIT 3,H', 0xcb, 0x5c, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.H, 3) }),
    new Operation('BIT 3,L', 0xcb, 0x5d, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.L, 3) }),
    new Operation('BIT 3,(HL)', 0xcb, 0x5e, 0, 16, function operation (gb, ins) { return gb.cpu.alu.bit(gb.memory.readByte(gb.register.HL), 3) }),
    new Operation('BIT 3,A', 0xcb, 0x5f, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.A, 3) }),

    // 0x60 .. 0x6F
    new Operation('BIT 4,B', 0xcb, 0x60, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.B, 4) }),
    new Operation('BIT 4,C', 0xcb, 0x61, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.C, 4) }),
    new Operation('BIT 4,D', 0xcb, 0x62, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.D, 4) }),
    new Operation('BIT 4,E', 0xcb, 0x63, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.E, 4) }),
    new Operation('BIT 4,H', 0xcb, 0x64, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.H, 4) }),
    new Operation('BIT 4,L', 0xcb, 0x65, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.L, 4) }),
    new Operation('BIT 4,(HL)', 0xcb, 0x66, 0, 16, function operation (gb, ins) { return gb.cpu.alu.bit(gb.memory.readByte(gb.register.HL), 4) }),
    new Operation('BIT 4,A', 0xcb, 0x67, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.A, 4) }),
    new Operation('BIT 5,B', 0xcb, 0x68, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.B, 5) }),
    new Operation('BIT 5,C', 0xcb, 0x69, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.C, 5) }),
    new Operation('BIT 5,D', 0xcb, 0x6a, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.D, 5) }),
    new Operation('BIT 5,E', 0xcb, 0x6b, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.E, 5) }),
    new Operation('BIT 5,H', 0xcb, 0x6c, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.H, 5) }),
    new Operation('BIT 5,L', 0xcb, 0x6d, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.L, 5) }),
    new Operation('BIT 5,(HL)', 0xcb, 0x6e, 0, 16, function operation (gb, ins) { return gb.cpu.alu.bit(gb.memory.readByte(gb.register.HL), 5) }),
    new Operation('BIT 5,A', 0xcb, 0x6f, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.A, 5) }),

    // 0x70 .. 0x7F
    new Operation('BIT 6,B', 0xcb, 0x70, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.B, 6) }),
    new Operation('BIT 6,C', 0xcb, 0x71, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.C, 6) }),
    new Operation('BIT 6,D', 0xcb, 0x72, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.D, 6) }),
    new Operation('BIT 6,E', 0xcb, 0x73, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.E, 6) }),
    new Operation('BIT 6,H', 0xcb, 0x74, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.H, 6) }),
    new Operation('BIT 6,L', 0xcb, 0x75, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.L, 6) }),
    new Operation('BIT 6,(HL)', 0xcb, 0x76, 0, 16, function operation (gb, ins) { return gb.cpu.alu.bit(gb.memory.readByte(gb.register.HL), 6) }),
    new Operation('BIT 6,A', 0xcb, 0x77, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.A, 6) }),
    new Operation('BIT 7,B', 0xcb, 0x78, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.B, 7) }),
    new Operation('BIT 7,C', 0xcb, 0x79, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.C, 7) }),
    new Operation('BIT 7,D', 0xcb, 0x7a, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.D, 7) }),
    new Operation('BIT 7,E', 0xcb, 0x7b, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.E, 7) }),
    new Operation('BIT 7,H', 0xcb, 0x7c, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.H, 7) }),
    new Operation('BIT 7,L', 0xcb, 0x7d, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.L, 7) }),
    new Operation('BIT 7,(HL)', 0xcb, 0x7e, 0, 16, function operation (gb, ins) { return gb.cpu.alu.bit(gb.memory.readByte(gb.register.HL), 7) }),
    new Operation('BIT 7,A', 0xcb, 0x7f, 0, 8, function operation (gb, ins) { return gb.cpu.alu.bit(gb.register.A, 7) }),

    // 0x80 .. 0x8F
    new Operation('RES 0,B', 0xcb, 0x80, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.res(gb.register.B, 0) }),
    new Operation('RES 0,C', 0xcb, 0x81, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.res(gb.register.C, 0) }),
    new Operation('RES 0,D', 0xcb, 0x82, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.res(gb.register.D, 0) }),
    new Operation('RES 0,E', 0xcb, 0x83, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.res(gb.register.E, 0) }),
    new Operation('RES 0,H', 0xcb, 0x84, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.res(gb.register.H, 0) }),
    new Operation('RES 0,L', 0xcb, 0x85, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.res(gb.register.L, 0) }),
    new Operation('RES 0,(HL)', 0xcb, 0x86, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.res(gb.memory.readByte(gb.register.HL), 0)) }),
    new Operation('RES 0,A', 0xcb, 0x87, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.res(gb.register.A, 0) }),
    new Operation('RES 1,B', 0xcb, 0x88, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.res(gb.register.B, 1) }),
    new Operation('RES 1,C', 0xcb, 0x89, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.res(gb.register.C, 1) }),
    new Operation('RES 1,D', 0xcb, 0x8a, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.res(gb.register.D, 1) }),
    new Operation('RES 1,E', 0xcb, 0x8b, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.res(gb.register.E, 1) }),
    new Operation('RES 1,H', 0xcb, 0x8c, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.res(gb.register.H, 1) }),
    new Operation('RES 1,L', 0xcb, 0x8d, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.res(gb.register.L, 1) }),
    new Operation('RES 1,(HL)', 0xcb, 0x8e, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.res(gb.memory.readByte(gb.register.HL), 1)) }),
    new Operation('RES 1,A', 0xcb, 0x8f, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.res(gb.register.A, 1) }),

    // 0x90 .. 0x9F
    new Operation('RES 2,B', 0xcb, 0x90, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.res(gb.register.B, 2) }),
    new Operation('RES 2,C', 0xcb, 0x91, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.res(gb.register.C, 2) }),
    new Operation('RES 2,D', 0xcb, 0x92, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.res(gb.register.D, 2) }),
    new Operation('RES 2,E', 0xcb, 0x93, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.res(gb.register.E, 2) }),
    new Operation('RES 2,H', 0xcb, 0x94, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.res(gb.register.H, 2) }),
    new Operation('RES 2,L', 0xcb, 0x95, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.res(gb.register.L, 2) }),
    new Operation('RES 2,(HL)', 0xcb, 0x96, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.res(gb.memory.readByte(gb.register.HL), 2)) }),
    new Operation('RES 2,A', 0xcb, 0x97, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.res(gb.register.A, 2) }),
    new Operation('RES 3,B', 0xcb, 0x98, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.res(gb.register.B, 3) }),
    new Operation('RES 3,C', 0xcb, 0x99, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.res(gb.register.C, 3) }),
    new Operation('RES 3,D', 0xcb, 0x9a, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.res(gb.register.D, 3) }),
    new Operation('RES 3,E', 0xcb, 0x9b, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.res(gb.register.E, 3) }),
    new Operation('RES 3,H', 0xcb, 0x9c, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.res(gb.register.H, 3) }),
    new Operation('RES 3,L', 0xcb, 0x9d, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.res(gb.register.L, 3) }),
    new Operation('RES 3,(HL)', 0xcb, 0x9e, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.res(gb.memory.readByte(gb.register.HL), 3)) }),
    new Operation('RES 3,A', 0xcb, 0x9f, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.res(gb.register.A, 3) }),

    // 0xA0 .. 0xAF
    new Operation('RES 4,B', 0xcb, 0xa0, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.res(gb.register.B, 4) }),
    new Operation('RES 4,C', 0xcb, 0xa1, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.res(gb.register.C, 4) }),
    new Operation('RES 4,D', 0xcb, 0xa2, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.res(gb.register.D, 4) }),
    new Operation('RES 4,E', 0xcb, 0xa3, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.res(gb.register.E, 4) }),
    new Operation('RES 4,H', 0xcb, 0xa4, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.res(gb.register.H, 4) }),
    new Operation('RES 4,L', 0xcb, 0xa5, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.res(gb.register.L, 4) }),
    new Operation('RES 4,(HL)', 0xcb, 0xa6, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.res(gb.memory.readByte(gb.register.HL), 4)) }),
    new Operation('RES 4,A', 0xcb, 0xa7, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.res(gb.register.A, 4) }),
    new Operation('RES 5,B', 0xcb, 0xa8, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.res(gb.register.B, 5) }),
    new Operation('RES 5,C', 0xcb, 0xa9, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.res(gb.register.C, 5) }),
    new Operation('RES 5,D', 0xcb, 0xaa, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.res(gb.register.D, 5) }),
    new Operation('RES 5,E', 0xcb, 0xab, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.res(gb.register.E, 5) }),
    new Operation('RES 5,H', 0xcb, 0xac, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.res(gb.register.H, 5) }),
    new Operation('RES 5,L', 0xcb, 0xad, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.res(gb.register.L, 5) }),
    new Operation('RES 5,(HL)', 0xcb, 0xae, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.res(gb.memory.readByte(gb.register.HL), 5)) }),
    new Operation('RES 5,A', 0xcb, 0xaf, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.res(gb.register.A, 5) }),

    // 0xB0 .. 0xBF
    new Operation('RES 6,B', 0xcb, 0xb0, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.res(gb.register.B, 6) }),
    new Operation('RES 6,C', 0xcb, 0xb1, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.res(gb.register.C, 6) }),
    new Operation('RES 6,D', 0xcb, 0xb2, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.res(gb.register.D, 6) }),
    new Operation('RES 6,E', 0xcb, 0xb3, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.res(gb.register.E, 6) }),
    new Operation('RES 6,H', 0xcb, 0xb4, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.res(gb.register.H, 6) }),
    new Operation('RES 6,L', 0xcb, 0xb5, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.res(gb.register.L, 6) }),
    new Operation('RES 6,(HL)', 0xcb, 0xb6, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.res(gb.memory.readByte(gb.register.HL), 6)) }),
    new Operation('RES 6,A', 0xcb, 0xb7, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.res(gb.register.A, 6) }),
    new Operation('RES 7,B', 0xcb, 0xb8, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.res(gb.register.B, 7) }),
    new Operation('RES 7,C', 0xcb, 0xb9, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.res(gb.register.C, 7) }),
    new Operation('RES 7,D', 0xcb, 0xba, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.res(gb.register.D, 7) }),
    new Operation('RES 7,E', 0xcb, 0xbb, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.res(gb.register.E, 7) }),
    new Operation('RES 7,H', 0xcb, 0xbc, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.res(gb.register.H, 7) }),
    new Operation('RES 7,L', 0xcb, 0xbd, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.res(gb.register.L, 7) }),
    new Operation('RES 7,(HL)', 0xcb, 0xbe, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.res(gb.memory.readByte(gb.register.HL), 7)) }),
    new Operation('RES 7,A', 0xcb, 0xbf, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.res(gb.register.A, 7) }),

    // 0xC0 .. 0xCF
    new Operation('SET 0,B', 0xcb, 0xc0, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.set(gb.register.B, 0) }),
    new Operation('SET 0,C', 0xcb, 0xc1, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.set(gb.register.C, 0) }),
    new Operation('SET 0,D', 0xcb, 0xc2, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.set(gb.register.D, 0) }),
    new Operation('SET 0,E', 0xcb, 0xc3, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.set(gb.register.E, 0) }),
    new Operation('SET 0,H', 0xcb, 0xc4, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.set(gb.register.H, 0) }),
    new Operation('SET 0,L', 0xcb, 0xc5, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.set(gb.register.L, 0) }),
    new Operation('SET 0,(HL)', 0xcb, 0xc6, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.set(gb.memory.readByte(gb.register.HL), 0)) }),
    new Operation('SET 0,A', 0xcb, 0xc7, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.set(gb.register.A, 0) }),
    new Operation('SET 1,B', 0xcb, 0xc8, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.set(gb.register.B, 1) }),
    new Operation('SET 1,C', 0xcb, 0xc9, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.set(gb.register.C, 1) }),
    new Operation('SET 1,D', 0xcb, 0xca, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.set(gb.register.D, 1) }),
    new Operation('SET 1,E', 0xcb, 0xcb, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.set(gb.register.E, 1) }),
    new Operation('SET 1,H', 0xcb, 0xcc, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.set(gb.register.H, 1) }),
    new Operation('SET 1,L', 0xcb, 0xcd, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.set(gb.register.L, 1) }),
    new Operation('SET 1,(HL)', 0xcb, 0xce, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.set(gb.memory.readByte(gb.register.HL), 1)) }),
    new Operation('SET 1,A', 0xcb, 0xcf, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.set(gb.register.A, 1) }),

    // 0xD0 .. 0xDF
    new Operation('SET 2,B', 0xcb, 0xd0, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.set(gb.register.B, 2) }),
    new Operation('SET 2,C', 0xcb, 0xd1, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.set(gb.register.C, 2) }),
    new Operation('SET 2,D', 0xcb, 0xd2, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.set(gb.register.D, 2) }),
    new Operation('SET 2,E', 0xcb, 0xd3, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.set(gb.register.E, 2) }),
    new Operation('SET 2,H', 0xcb, 0xd4, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.set(gb.register.H, 2) }),
    new Operation('SET 2,L', 0xcb, 0xd5, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.set(gb.register.L, 2) }),
    new Operation('SET 2,(HL)', 0xcb, 0xd6, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.set(gb.memory.readByte(gb.register.HL), 2)) }),
    new Operation('SET 2,A', 0xcb, 0xd7, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.set(gb.register.A, 2) }),
    new Operation('SET 3,B', 0xcb, 0xd8, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.set(gb.register.B, 3) }),
    new Operation('SET 3,C', 0xcb, 0xd9, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.set(gb.register.C, 3) }),
    new Operation('SET 3,D', 0xcb, 0xda, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.set(gb.register.D, 3) }),
    new Operation('SET 3,E', 0xcb, 0xdb, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.set(gb.register.E, 3) }),
    new Operation('SET 3,H', 0xcb, 0xdc, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.set(gb.register.H, 3) }),
    new Operation('SET 3,L', 0xcb, 0xdd, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.set(gb.register.L, 3) }),
    new Operation('SET 3,(HL)', 0xcb, 0xde, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.set(gb.memory.readByte(gb.register.HL), 3)) }),
    new Operation('SET 3,A', 0xcb, 0xdf, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.set(gb.register.A, 3) }),

    // 0xE0 .. 0xEF
    new Operation('SET 4,B', 0xcb, 0xe0, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.set(gb.register.B, 4) }),
    new Operation('SET 4,C', 0xcb, 0xe1, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.set(gb.register.C, 4) }),
    new Operation('SET 4,D', 0xcb, 0xe2, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.set(gb.register.D, 4) }),
    new Operation('SET 4,E', 0xcb, 0xe3, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.set(gb.register.E, 4) }),
    new Operation('SET 4,H', 0xcb, 0xe4, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.set(gb.register.H, 4) }),
    new Operation('SET 4,L', 0xcb, 0xe5, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.set(gb.register.L, 4) }),
    new Operation('SET 4,(HL)', 0xcb, 0xe6, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.set(gb.memory.readByte(gb.register.HL), 4)) }),
    new Operation('SET 4,A', 0xcb, 0xe7, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.set(gb.register.A, 4) }),
    new Operation('SET 5,B', 0xcb, 0xe8, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.set(gb.register.B, 5) }),
    new Operation('SET 5,C', 0xcb, 0xe9, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.set(gb.register.C, 5) }),
    new Operation('SET 5,D', 0xcb, 0xea, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.set(gb.register.D, 5) }),
    new Operation('SET 5,E', 0xcb, 0xeb, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.set(gb.register.E, 5) }),
    new Operation('SET 5,H', 0xcb, 0xec, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.set(gb.register.H, 5) }),
    new Operation('SET 5,L', 0xcb, 0xed, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.set(gb.register.L, 5) }),
    new Operation('SET 5,(HL)', 0xcb, 0xee, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.set(gb.memory.readByte(gb.register.HL), 5)) }),
    new Operation('SET 5,A', 0xcb, 0xef, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.set(gb.register.A, 5) }),

    // 0xF0 .. 0xFF
    new Operation('SET 6,B', 0xcb, 0xf0, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.set(gb.register.B, 6) }),
    new Operation('SET 6,C', 0xcb, 0xf1, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.set(gb.register.C, 6) }),
    new Operation('SET 6,D', 0xcb, 0xf2, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.set(gb.register.D, 6) }),
    new Operation('SET 6,E', 0xcb, 0xf3, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.set(gb.register.E, 6) }),
    new Operation('SET 6,H', 0xcb, 0xf4, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.set(gb.register.H, 6) }),
    new Operation('SET 6,L', 0xcb, 0xf5, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.set(gb.register.L, 6) }),
    new Operation('SET 6,(HL)', 0xcb, 0xf6, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.set(gb.memory.readByte(gb.register.HL), 6)) }),
    new Operation('SET 6,A', 0xcb, 0xf7, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.set(gb.register.A, 6) }),
    new Operation('SET 7,B', 0xcb, 0xf8, 0, 8, function operation (gb, ins) { return gb.register.B = gb.cpu.alu.set(gb.register.B, 7) }),
    new Operation('SET 7,C', 0xcb, 0xf9, 0, 8, function operation (gb, ins) { return gb.register.C = gb.cpu.alu.set(gb.register.C, 7) }),
    new Operation('SET 7,D', 0xcb, 0xfa, 0, 8, function operation (gb, ins) { return gb.register.D = gb.cpu.alu.set(gb.register.D, 7) }),
    new Operation('SET 7,E', 0xcb, 0xfb, 0, 8, function operation (gb, ins) { return gb.register.E = gb.cpu.alu.set(gb.register.E, 7) }),
    new Operation('SET 7,H', 0xcb, 0xfc, 0, 8, function operation (gb, ins) { return gb.register.H = gb.cpu.alu.set(gb.register.H, 7) }),
    new Operation('SET 7,L', 0xcb, 0xfd, 0, 8, function operation (gb, ins) { return gb.register.L = gb.cpu.alu.set(gb.register.L, 7) }),
    new Operation('SET 7,(HL)', 0xcb, 0xfe, 0, 16, function operation (gb, ins) { return gb.memory.writeByte(gb.register.HL, gb.cpu.alu.set(gb.memory.readByte(gb.register.HL), 7)) }),
    new Operation('SET 7,A', 0xcb, 0xff, 0, 8, function operation (gb, ins) { return gb.register.A = gb.cpu.alu.set(gb.register.A, 7) }),
];

module.exports = {
    operationMap,
    cbOperationMap,
    EXT_OPS_CB_CODE,
};
